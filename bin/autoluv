#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"
require "commander/import"
require "pony"
require_relative "../lib/autoluv"

program :version, "0.0.1"
program :description, "Automatically schedule and check into Southwest flights 24 hours beforehand."

command :lookup do |c|
  c.syntax = "autoluv lookup [options]"
  c.description = "Lookup departing flight info for a given Southwest confirmation number."
  c.example "Typical Usage", "autoluv lookup -c ABCDEF -f John -l Doe"
  c.option "-c", "--confirmation-number NUMBER", "Required"
  c.option "-f", "--first-name NAME", "Required"
  c.option "-l", "--last-name NAME", "Required"
  c.action do |args, options|
    raise OptionParser::MissingArgument, "Confirmation Number" if options.confirmation_number.nil?
    raise OptionParser::MissingArgument, "First Name" if options.first_name.nil?
    raise OptionParser::MissingArgument, "Last Name" if options.last_name.nil?

    sw = AutoLUV::Southwest.new options.confirmation_number, options.first_name, options.last_name
    results = sw.departing_flights

    if results[:success]
      results[:departing_flights].each { |flight| puts flight }
    else
      puts results[:message]
    end
  end
end

command :checkin do |c|
  c.syntax = "autoluv checkin [options]"
  c.description = "Immediately check into a Southwest flight."
  c.example "Example Usage", "autoluv checkin -b email -e example@email.com -c ABCDEF -f John -l Doe"
  c.option "-c", "--confirmation-number NUMBER", "Required"
  c.option "-f", "--first-name NAME", "Required"
  c.option "-l", "--last-name NAME", "Required"
  c.option "-b", "--boarding-pass OPTION", String, ["print", "email", "text"], "Valid options are: print, email, or text. If the --boarding-pass switch is not specified, print is assumed."
  c.option "-p", "--phone NUMBER", "Required if --boarding-pass text is specified."
  c.option "-e", "--email ADDRESS", "Required if --boarding-pass email is specified."
  c.option "-n", "--notify", "If specified, send an email notification with results."
  c.action do |args, options|
    options.default :boarding_pass => "print"

    raise OptionParser::MissingArgument, "--confirmation-number required" if options.confirmation_number.nil?
    raise OptionParser::MissingArgument, "--first-name required" if options.first_name.nil?
    raise OptionParser::MissingArgument, "--last-name required" if options.last_name.nil?
    raise OptionParser::MissingArgument, "--email required when using --boarding-pass email or --notify" if (options.boarding_pass == "email" || options.notify) && options.email.nil?
    raise OptionParser::MissingArgument, "--phone required when using --boarding-pass text" if options.boarding_pass == "text" && options.phone.nil?

    case options.boarding_pass
    when "email"
      contact_info = options.email
    when "text"
      contact_info = options.phone
    end

    sw = AutoLUV::Southwest.new options.confirmation_number, options.first_name, options.last_name
    results = sw.checkin options.boarding_pass.to_sym, contact_info

    if results[:success]
      subject = "[autoluv] Check-In Succeeded"
      body = "https://www.southwest.com/flight/retrieveCheckinDoc.html?confirmationNumber=#{options.confirmation_number}&firstName=#{options.first_name}&lastName=#{options.last_name}"
    else
      subject = "[autoluv] Check-In Failed"
      body = results[:message]
    end

    if options.notify
      Pony.mail(:to => options.email, :from => "autoluv@localhost", :subject => subject, :body => body)
    else
      puts results[:message]
    end
  end
end

command :schedule do |c|
  c.syntax = "autoluv schedule [options]"
  c.description = "Schedule check ins based on confirmation number."
  c.example "Example Usage", "autoluv schedule -c ABCDEF -f John -l Doe -b text -p 555-555-1212"
  c.option "-c", "--confirmation-number NUMBER", "Required"
  c.option "-f", "--first-name NAME", "Required"
  c.option "-l", "--last-name NAME", "Required"
  c.option "-b", "--boarding-pass OPTION", String, ["print", "email", "text"], "Valid options are: print, email, or text. If the --boarding-pass switch is not specified, print is assumed."
  c.option "-p", "--phone NUMBER", "Required if --boarding-pass text is specified."
  c.option "-e", "--email ADDRESS", "Required (for sending results)"
  c.action do |args, options|
    options.default :boarding_pass => "print"

    raise OptionParser::MissingArgument, "--confirmation-number required" if options.confirmation_number.nil?
    raise OptionParser::MissingArgument, "--first-name required" if options.first_name.nil?
    raise OptionParser::MissingArgument, "--last-name required" if options.last_name.nil?
    raise OptionParser::MissingArgument, "--email required" if options.email.nil?
    raise OptionParser::MissingArgument, "--phone required when using --boarding-pass text" if options.boarding_pass == "text" && options.phone.nil?

    sw = AutoLUV::Southwest.new options.confirmation_number, options.first_name, options.last_name
    results = sw.departing_flights

    if results[:success]
      results[:departing_flights].each do |flight|
        checkin_time = flight.time

        # offsets are in seconds
        checkin_offset = checkin_time.utc_offset
        server_offset = Time.now.utc_offset

        offset_hours = checkin_offset - server_offset

        # we can check in one day beforehand (1 day converted to seconds)
        checkin_time -= (24 * 60 * 60)

        # compensate for our server time zone
        checkin_time -= offset_hours

        ruby_command = "ruby autoluv checkin --notify -c #{options.confirmation_number} -f #{options.first_name} -l #{options.last_name} -b #{options.boarding_pass} -e #{options.email}"
        ruby_command += " -p #{options.phone}" if options.boarding_pass == "text"

        at_command = "echo '#{ruby_command}' | at #{checkin_time.strftime('%I:%M %p %m/%d/%y')}"
        puts at_command
        `#{at_command}`
      end
    else
      puts results[:message]
    end
  end
end